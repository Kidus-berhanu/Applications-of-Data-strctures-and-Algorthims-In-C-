#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
#include <climits>

using namespace std;

struct Node {
    int id, distance;
    Node(int id, int distance) : id(id), distance(distance) {}
};

struct Compare {
    bool operator() (const Node& a, const Node& b) {
        return a.distance > b.distance;
    }
};

using Graph = unordered_map<int, vector<pair<int, int>>>;

void dijkstra(const Graph& graph, int start, unordered_map<int, int>& distances) {
    priority_queue<Node, vector<Node>, Compare> pq;
    pq.push(Node(start, 0));
    distances[start] = 0;

    while (!pq.empty()) {
        Node current = pq.top();
        pq.pop();

        for (const auto& neighbor : graph.at(current.id)) {
            int new_distance = current.distance + neighbor.second;
            if (new_distance < distances[neighbor.first]) {
                distances[neighbor.first] = new_distance;
                pq.push(Node(neighbor.first, new_distance));
            }
        }
    }
}

int main() {
    Graph graph = {
        {1, {{2, 1}, {3, 4}}},
        {2, {{1, 1}, {3, 2}, {4, 5}}},
        {3, {{1, 4}, {2, 2}, {4, 1}}},
        {4, {{2, 5}, {3, 1}}}
    };

    unordered_map<int, int> distances;
    for (const auto& node : graph) {
        distances[node.first] = INT_MAX;
    }

    int start = 1;
    dijkstra(graph, start, distances);

    cout << "Shortest distances from node " << start << ":\n";
    for (const auto& [node, distance] : distances) {
        cout << "Node " << node << ": " << distance << '\n';
    }

    return 0;
}
